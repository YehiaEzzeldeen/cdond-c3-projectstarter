version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory and memstash
          command: | 
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=Udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=Udapeople" \
              --output text)
            echo "HERE"  
            echo ${ip}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${ip} https://api.memstash.io/values/ip
      - run: 
          name: Install tar, gzip
          command: |
            yum -y install tar gzip       
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys: 
          fingerprints: [11:bc:9b:40:95:90:65:6d:7b:2f:2d:be:dc:e7:72:3c]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install AWS-CLI
          command: |
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Configure server
          no_output_timeout: 20m
          command: |
            pwd
            touch ~/project/backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION>> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS-CLI
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            sudo npm i -g pm2
            npm run migrations > migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            cat migration_${CIRCLE_WORKFLOW_ID:0:7}.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            if grep -q "has been executed successfully" migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            then
              result=1
            fi
            curl -H "Content-Type: text/plain" \
            -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data ${result} https://api.memstash.io/values/migration
            
            echo ${result}
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Deploy frontend objects
          command: |
            ip=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/ip)
            cd frontend
            export API_URL=http://${ip}:3030
            echo "API_URL=$API_URL" >> .env
            echo ${API_URL}
            npm install
            npm run build
            ls -la 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -la 
            aws s3 sync dist s3://udapeople-hdqqwd1278/
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: [11:bc:9b:40:95:90:65:6d:7b:2f:2d:be:dc:e7:72:3c]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Deploy backend
          no_output_timeout: 25m
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Get the URL of Backend and smoke test.
          command: |
            ip=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/ip)
            echo ${ip}
            curl "http://${ip}:3030/api/status"

      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-hdqqwd1278.s3-website-us-west-1.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Getting old workflow ID 
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID} " --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID    
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
                aws cloudformation deploy \
                --template-file cloudfront.yml \
                --stack-name udapeople-cloudfront \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" 
     
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  cleanup:
      docker:
        - image: amazon/aws-cli

      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum install gzip tar python3-pip curl -y
              curl -sL https://rpm.nodesource.com/setup_10.x | bash -
              yum install nodejs npm -y
              npm install       
        - run:
            name: Clean Up
            command: |
              # your code here
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}
              
              echo Old Workflow Id: "${OldWorkflowID}"
              echo CurrentWorkflowID: "${CurrentWorkflowID}" 
             
              if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
              else
               echo "SAME"
              fi
        - destroy-environment:
            WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations
                     
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]    